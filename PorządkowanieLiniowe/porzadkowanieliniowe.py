# -*- coding: utf-8 -*-
"""porzadkowanieLiniowe.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QWriMqMLpo2psNlRUftudfOmKCVrWZJc
"""

import numpy as np
import pandas as pd
powiaty = pd.read_excel(io = "Powiaty.xls")
powiaty.head()

"""Tworzymy nowe zmienne, które będą znormalizowymi zmiennnymi diagnostycznymi."""

powiaty["z1"] = (powiaty.X1_s - min(powiaty.X1_s)) / (max(powiaty.X1_s) - min(powiaty.X1_s)) ## tak tworzymy w pandasie nową zmienną, w nawiasie
powiaty.z1.describe()
## dokonaliśmy unitarizacji zerowanej - nasza zmienna musi być w przedziale od 0 do 1

"""Pętla for"""

for i in range(0, 10):
  print(i)
  ## aby wyjść z pętli trzeba usunąć wcięcie

"""Pętla for z enumerate"""

for i, j in enumerate(["atrakcyjność", "inwestycyjna", "regionów"]): ## mamy dwa indeksy, a lista jest jednowymiarowa (enumerate - każdemu elementowi przypisywana jest wartość od 0)
  print(i) ## printuje liczby
  print(j) ## printuje wyrazy

"""Sklejanie tekstów"""

"ala" + "ma" + "kota"

"""Tworzymy pętlę, w której przejdziemy przez wszystkie stymulanty i utworzymy nowe zmienne z1, z2, z3."""

for i, j in enumerate (["X1_s", "X2_s"]):
  nowa_zmienna = "z" + str(i) ## str tworzy String
  powiaty[nowa_zmienna] = (powiaty[j] - min(powiaty[j])) / (max(powiaty[j]) - min(powiaty[j])) ## w kwadratowym nawiasie - nazwa zmiennej
  
  
powiaty.head()

"""Tworzymy pętlę, w której przejdziemy przez wszystkie destymulanty i utworzymy nowe zmienne z1, z2, z3."""

for i, j in enumerate (["X3_d", "X4_d", "X5_d", "X6_d"]):
  nowa_zmienna = "z" + str(i + 2) 
  powiaty[nowa_zmienna] = (max(powiaty[j]) - powiaty[j]) / (max(powiaty[j]) - min(powiaty[j]))
  
  
powiaty.describe()

"""Tworzymy pętlę for ale z warunkowym przebiegiem"""

powiaty.columns

for i, value in enumerate (powiaty.columns):
  if value.endswith("_d"):
    nz = "z" + str(i - 1)
    powiaty[nz] = (max(powiaty[value]) - powiaty[value]) / (max(powiaty[value]) - min(powiaty[value]))
    ##print(i, "destymulanta")
  elif value.endswith("_s"):
    nz = "z" + str(i - 1)
    powiaty[nz] = (powiaty[value] - min(powiaty[value])) / (max(powiaty[value]) - min(powiaty[value]))
    ##print(i, "stymulanta")
    
powiaty.head()

powiaty["SMR"] = powiaty[["z1", "z2", "z3", "z4", "z5", "z6"]].mean(axis = 1) ## będziemy liczyć średnią arytmetyczną, axis = 1 - po kolumnach (dla każdego wiersza) ma liczyć średnią, axis = 0 po wierszach
powiaty.head()
powiaty.sort_values(by = "SMR", ascending = False)[["Powiaty", "SMR"]] ## sortowanie po to by sprawdzić czy wynik jest sensowny